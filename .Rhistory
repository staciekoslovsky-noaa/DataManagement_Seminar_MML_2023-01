rename(measurement_type_lku = length_name,
pixels_counted = length_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d")) %>%
select(id, target_id, measurement_type_lku, pixels_counted, measured_by, measurement_date, image_id, target_posture_id, measurement_file_name)
rlang::last_error()
toDB_lengths <- lw %>%
filter(length_name == "TL") %>%
select(measurement_file_name, W_090pct_px, W_181pct_px, W_272pct_px, W_363pct_px, W_454pct_px, W_545pct_px, W_636pct_px, W_727pct_px, W_818pct_px, W_909pct_px) %>%
pivot_longer(!measurement_file_name, names_to = "length_name") %>%
rename(length_px = value) %>%
select(length_name, length_px, measurement_file_name) %>%
mutate(length_name = ifelse(length_name == "W_090pct_px", "W01", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_181pct_px", "W02", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_272pct_px", "W03", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_363pct_px", "W04", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_454pct_px", "W05", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_545pct_px", "W06", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_636pct_px", "W07", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_727pct_px", "W08", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_818pct_px", "W09", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_909pct_px", "W10", length_name)) %>%
rbind(temp_lw) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = length_name,
pixels_counted = length_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d"))
toDB_lengths <- lw %>%
filter(length_name == "TL") %>%
select(measurement_file_name, W_090pct_px, W_181pct_px, W_272pct_px, W_363pct_px, W_454pct_px, W_545pct_px, W_636pct_px, W_727pct_px, W_818pct_px, W_909pct_px) %>%
pivot_longer(!measurement_file_name, names_to = "length_name") %>%
rename(length_px = value) %>%
select(length_name, length_px, measurement_file_name) %>%
mutate(length_name = ifelse(length_name == "W_090pct_px", "W01", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_181pct_px", "W02", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_272pct_px", "W03", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_363pct_px", "W04", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_454pct_px", "W05", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_545pct_px", "W06", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_636pct_px", "W07", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_727pct_px", "W08", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_818pct_px", "W09", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_909pct_px", "W10", length_name)) %>%
rbind(temp_lw) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = length_name,
pixels_counted = length_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d")) %>%
select(id, target_id, measurement_type_lku, pixels_counted, measured_by, measurement_date, image_id, target_posture_lku, measurement_file_name)
RPostgreSQL::dbWriteTable(con, c("body_condition", "tbl_measurements_nadir"), toDB_lengths, append = TRUE, row.names = FALSE)
files$file_name[j] %in% imported$measurement_file_name
imported <- RPostgreSQL::dbGetQuery(con, "SELECT DISTINCT measurement_file_name FROM body_condition.tbl_measurements_nadir")
View(imported)
files$file_name[j] %in% imported$measurement_file_name
View(files)
View(imported)
View(files)
View(files)
if(!dir.exists(dir$path[i])) next
image_name <- paste0(basename((dir$path[i])), ".JPG")
files <- list.files(dir$path[i], full.names = TRUE, recursive = FALSE)
files <- data.frame(path = files[grep("csv", files)], stringsAsFactors = FALSE)
files <- files %>%
mutate(file_name = basename(path))
View(files)
dir <- list.dirs(paste(wd, years[y], sep = "/"), full.names = TRUE, recursive = TRUE)
dir <- data.frame(path = dir[grep("fl[0-9][0-9]_[0-9][0-9][0-9][0-9]$", dir)], stringsAsFactors = FALSE)
View(dir)
wd <- "O:\\Data\\UAS\\UAS_BodyCondition\\Measurements"
years <- c(2021, 2022)
dir <- list.dirs(paste(wd, years[y], sep = "/"), full.names = TRUE, recursive = TRUE)
dir <- data.frame(path = dir[grep("fl[0-9][0-9]_[0-9][0-9][0-9][0-9]$", dir)], stringsAsFactors = FALSE)
if(!dir.exists(dir$path[i])) next
image_name <- paste0(basename((dir$path[i])), ".JPG")
files <- list.files(dir$path[i], full.names = TRUE, recursive = FALSE)
files <- data.frame(path = files[grep("csv", files)], stringsAsFactors = FALSE)
files <- files %>%
mutate(file_name = basename(path))
View(files)
areas <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"area_name",
"area_px",
"area_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE)
View(areas)
View(areas)
toDB_areas <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"area_name",
"area_px",
"area_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
mutate(measurement_file_name = files$file_name[j]) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = length_name,
pixels_counted = length_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d")) %>%
select(id, target_id, measurement_type_lku, pixels_counted, measured_by, measurement_date, image_id, target_posture_lku, measurement_file_name)
toDB_areas <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"area_name",
"area_px",
"area_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
mutate(measurement_file_name = files$file_name[j]) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = area_name,
pixels_counted = area_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d")) %>%
select(id, target_id, measurement_type_lku, pixels_counted, measured_by, measurement_date, image_id, target_posture_lku, measurement_file_name)
toDB_areas <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"area_name",
"area_px",
"area_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
mutate(measurement_file_name = files$file_name[j]) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name")
View(areas)
View(toDB_areas)
toDB_areas <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"area_name",
"area_px",
"area_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
mutate(measurement_file_name = files$file_name[j]) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id))
toDB_areas <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"area_name",
"area_px",
"area_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
mutate(measurement_file_name = files$file_name[j]) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = area_name,
pixels_counted = area_px)
toDB_areas <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"area_name",
"area_px",
"area_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
mutate(measurement_file_name = files$file_name[j]) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = area_name,
pixels_counted = area_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d"))
toDB_areas <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"area_name",
"area_px",
"area_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
select(-image_id) %>%
mutate(measurement_file_name = files$file_name[j]) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = area_name,
pixels_counted = area_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d")) %>%
select(id, target_id, measurement_type_lku, pixels_counted, measured_by, measurement_date, image_id, target_posture_lku, measurement_file_name)
source("~/Work/GitHub/BodyCondition_DataManagement/BodyCondition_04_ImportMeasurements.R", echo=TRUE)
View(files)
source("~/Work/GitHub/BodyCondition_DataManagement/BodyCondition_04_ImportMeasurements.R", echo=TRUE)
View(toDB_areas)
View(images_targets)
source("~/Work/GitHub/BodyCondition_DataManagement/BodyCondition_04_ImportMeasurements.R", echo=TRUE)
failed_to_import <- list("")
View(toDB_lengths)
View(toDB_areas)
source("~/Work/GitHub/BodyCondition_DataManagement/BodyCondition_04_ImportMeasurements.R", echo=TRUE)
source("~/Work/GitHub/BodyCondition_DataManagement/BodyCondition_04_ImportMeasurements.R", echo=TRUE)
if(files$file_name[j] %in% imported$measurement_file_name) next
processed_id <- RPostgreSQL::dbGetQuery(con, "SELECT max(id) FROM body_condition.tbl_measurements_nadir WHERE id < 9000000")
processed_id$max <- ifelse(is.na(processed_id$max), 0, processed_id$max)
if(grepl("lengths-widths", files$file_name[j], fixed = TRUE) == TRUE) {
lw <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"length_name",
"length_px",
"length_m",
"W_090pct_px",
"W_181pct_px",
"W_272pct_px",
"W_363pct_px",
"W_454pct_px",
"W_545pct_px",
"W_636pct_px",
"W_727pct_px",
"W_818pct_px",
"W_909pct_px",
"W_090pct_m",
"W_181pct_m",
"W_272pct_m",
"W_363pct_m",
"W_454pct_m",
"W_545pct_m",
"W_636pct_m",
"W_727pct_m",
"W_818pct_m",
"W_909pct_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
mutate(measurement_file_name = files$file_name[j])
temp_lw <- lw %>%
select(length_name, length_px, measurement_file_name)
toDB_lengths <- lw %>%
filter(length_name == "TL") %>%
select(measurement_file_name, W_090pct_px, W_181pct_px, W_272pct_px, W_363pct_px, W_454pct_px, W_545pct_px, W_636pct_px, W_727pct_px, W_818pct_px, W_909pct_px) %>%
pivot_longer(!measurement_file_name, names_to = "length_name") %>%
rename(length_px = value) %>%
select(length_name, length_px, measurement_file_name) %>%
mutate(length_name = ifelse(length_name == "W_090pct_px", "W01", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_181pct_px", "W02", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_272pct_px", "W03", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_363pct_px", "W04", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_454pct_px", "W05", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_545pct_px", "W06", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_636pct_px", "W07", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_727pct_px", "W08", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_818pct_px", "W09", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_909pct_px", "W10", length_name)) %>%
rbind(temp_lw) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = length_name,
pixels_counted = length_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d")) %>%
select(id, target_id, measurement_type_lku, pixels_counted, measured_by, measurement_date, image_id, target_posture_lku, measurement_file_name)
processed_id <- RPostgreSQL::dbGetQuery(con, "SELECT max(id) FROM body_condition.tbl_measurements_nadir WHERE id < 9000000")
processed_id$max <- ifelse(is.na(processed_id$max), 0, processed_id$max)
lw <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"length_name",
"length_px",
"length_m",
"W_090pct_px",
"W_181pct_px",
"W_272pct_px",
"W_363pct_px",
"W_454pct_px",
"W_545pct_px",
"W_636pct_px",
"W_727pct_px",
"W_818pct_px",
"W_909pct_px",
"W_090pct_m",
"W_181pct_m",
"W_272pct_m",
"W_363pct_m",
"W_454pct_m",
"W_545pct_m",
"W_636pct_m",
"W_727pct_m",
"W_818pct_m",
"W_909pct_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
mutate(measurement_file_name = files$file_name[j])
View(lw)
files$file_name[j]
View(files)
source("~/Work/GitHub/BodyCondition_DataManagement/BodyCondition_04_ImportMeasurements.R", echo=TRUE)
if(!dir.exists(dir$path[i])) next
image_name <- paste0(basename((dir$path[i])), ".JPG")
files <- list.files(dir$path[i], full.names = TRUE, recursive = FALSE)
files <- data.frame(path = files[grep("csv", files)], stringsAsFactors = FALSE)
files <- files %>%
mutate(file_name = basename(path))
# Check if file already imported
if(files$file_name[j] %in% imported$measurement_file_name) next
processed_id <- RPostgreSQL::dbGetQuery(con, "SELECT max(id) FROM body_condition.tbl_measurements_nadir WHERE id < 9000000")
processed_id$max <- ifelse(is.na(processed_id$max), 0, processed_id$max)
View(files)
files$file_name[j]
toDB_areas <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"area_name",
"area_px",
"area_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
select(-image_id) %>%
mutate(measurement_file_name = files$file_name[j]) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = area_name,
pixels_counted = area_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d")) %>%
select(id, target_id, measurement_type_lku, pixels_counted, measured_by, measurement_date, image_id, target_posture_lku, measurement_file_name)
if(is.na(toDB_lengths$pixels_counted)) {
failed_to_import <- append(basename(files$path[j]), failed_to_import)
} else {
# Write data to the DB
RPostgreSQL::dbWriteTable(con, c("body_condition", "tbl_measurements_nadir"), toDB_areas, append = TRUE, row.names = FALSE)
}
source("~/Work/GitHub/BodyCondition_DataManagement/BodyCondition_04_ImportMeasurements.R", echo=TRUE)
View(toDB)
if(grepl("lengths-widths", files$file_name[j], fixed = TRUE) == TRUE) {
lw <- read.table(files$path[j], sep = ",", col.names = c("image_id",
"image_path",
"focal_length",
"altitude",
"pixel_dimension",
"type",
"length_name",
"length_px",
"length_m",
"W_090pct_px",
"W_181pct_px",
"W_272pct_px",
"W_363pct_px",
"W_454pct_px",
"W_545pct_px",
"W_636pct_px",
"W_727pct_px",
"W_818pct_px",
"W_909pct_px",
"W_090pct_m",
"W_181pct_m",
"W_272pct_m",
"W_363pct_m",
"W_454pct_m",
"W_545pct_m",
"W_636pct_m",
"W_727pct_m",
"W_818pct_m",
"W_909pct_m"),
skip = 1, header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, colClasses = "character", dec = ".", fill = TRUE, strip.white = TRUE) %>%
mutate(measurement_file_name = files$file_name[j])
temp_lw <- lw %>%
select(length_name, length_px, measurement_file_name)
toDB <- lw %>%
filter(length_name == "TL") %>%
select(measurement_file_name, W_090pct_px, W_181pct_px, W_272pct_px, W_363pct_px, W_454pct_px, W_545pct_px, W_636pct_px, W_727pct_px, W_818pct_px, W_909pct_px) %>%
pivot_longer(!measurement_file_name, names_to = "length_name") %>%
rename(length_px = value) %>%
select(length_name, length_px, measurement_file_name) %>%
mutate(length_name = ifelse(length_name == "W_090pct_px", "W01", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_181pct_px", "W02", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_272pct_px", "W03", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_363pct_px", "W04", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_454pct_px", "W05", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_545pct_px", "W06", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_636pct_px", "W07", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_727pct_px", "W08", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_818pct_px", "W09", length_name)) %>%
mutate(length_name = ifelse(length_name == "W_909pct_px", "W10", length_name)) %>%
rbind(temp_lw) %>%
mutate(id =  1:n() + processed_id$max,
image_name = image_name) %>%
left_join(images_targets, by = "image_name") %>%
filter(!is.na(target_id)) %>%
rename(measurement_type_lku = length_name,
pixels_counted = length_px) %>%
mutate(measured_by = sapply(strsplit(measurement_file_name, "_"), function(x) x[7]),
measurement_date = as.Date(sapply(strsplit(measurement_file_name, "_"), function(x) x[6]), format = "%Y%m%d")) %>%
select(id, target_id, measurement_type_lku, pixels_counted, measured_by, measurement_date, image_id, target_posture_lku, measurement_file_name)
}
View(toDB)
files$file_name[j]
View(images_targets)
source("~/Work/GitHub/BodyCondition_DataManagement/BodyCondition_04_ImportMeasurements.R", echo=TRUE)
View(temp_lw)
# UAS Body Condition: Import LRF data to DB
# S. Hardy
# Set Working Variables
wd <- "O:\\Data\\UAS\\UAS_BodyCondition\\Measurements"
years <- c(2021, 2022)
# Create functions -----------------------------------------------
# Function to install packages needed
install_pkg <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
# Install libraries ----------------------------------------------
install_pkg("RPostgreSQL")
install_pkg("tidyverse")
install_pkg("lubridate")
# Run code -------------------------------------------------------
setwd(wd)
"%notin%" <- Negate("%in%")
options(digits.secs=3)
# Get list of already imported data from DB
con <- RPostgreSQL::dbConnect(PostgreSQL(),
dbname = Sys.getenv("pep_db"),
host = Sys.getenv("pep_ip"),
user = Sys.getenv("pep_user"),
password = Sys.getenv("user_pw"))
wd <- "O:\\Data\\UAS\\UAS_BodyCondition\\Measurements"
years <- c(2021, 2022)
# Create functions -----------------------------------------------
# Function to install packages needed
install_pkg <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
# Install libraries ----------------------------------------------
install_pkg("RPostgreSQL")
install_pkg("tidyverse")
install_pkg("lubridate")
# Run code -------------------------------------------------------
setwd(wd)
"%notin%" <- Negate("%in%")
options(digits.secs=3)
# Get list of already imported data from DB
con <- RPostgreSQL::dbConnect(PostgreSQL(),
dbname = Sys.getenv("pep_db"),
host = Sys.getenv("pep_ip"),
user = Sys.getenv("pep_user"),
password = Sys.getenv("user_pw"))
con <- RPostgreSQL::dbConnect(PostgreSQL(),
dbname = Sys.getenv("pep_db"),
host = Sys.getenv("pep_ip"),
user = Sys.getenv("pep_admin"),
password = Sys.getenv("admin_pw"))
dbSendQuery(con, "SELECT
pg_terminate_backend(pid)
FROM
pg_stat_activity
WHERE
pid <> pg_backend_pid()
AND datname = \'pep\'")
